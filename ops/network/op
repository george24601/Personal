#!/bin/bash
##dig###
<<DATA
the answer section:

name                 expire  class   type     data (IP)

You can ignore the "class" field; this is nearly always IN for Internet.

The AUTHORITY section contains records of type NS, indicating the names of DNS servers that have name records for a particular domain.

The rd (recursion desired) flag indicates that dig requested a recursive lookup, and the ra (recursion available) flag indicates that the server permits recursive lookups (some do not).

SERVER: 127.0.0.1#53 => default cache resolve, means your computer has DNS service, e.g., DNSmasq
DATA
#trace will show all steps
dig +trace wikipedia.org


<<RECUR
dig only prints the final result of the recursive search. You can mimic the individual steps of a recursive search by sending a request to a particular DNS server and asking for no recursion, using the +norecurs flag. For example, to send a non-recursive query to one of the root servers:
RECUR
dig @a.ROOT-SERVERS.NET www.wikipedia.org +norecurs

#txt record type is special => need to specify type explicitly
dig -t txt YOUR_TXT_DNS_NAME


#check source of Authority with forward resolver
dig SOA +multiline $DOMAIN_NAME 

###tcpdump#######


#-nn : A single (n) will not resolve hostnames. A double (nn) will not resolve hostnames or ports. This is handy for not only viewing the IP / port numbers but also when capturing a large amount of data, as the name resolution will slow down the capture.
#-s0 : Snap length, is the size of the packet to capture. -s0 will set the size to unlimited - use this if you want to capture all the traffic. Needed if you want to pull binaries / files from network traffic.
#-v : Verbose, using (-v) or (-vv) increases the amount of detail shown in the output, often showing more protocol specific information.
sudo tcpdump -i eth0 -nn -s0 -v port 80

#Adding -A to the command line will have the output include the ascii strings from the capture
sudo tcpdump -A -s0 port 80

#-S changes the display of sequence nubmers to absolute
#-s $BYTES_TO_CAP , default 96

#Using the host filter will capture traffic going to (destination) and from (source) the IP address.
sudo tcpdump host $IP

#look for traffic to destination
sudo tcpdump dst "${TO_IP}"

#find specific $PORT traffic
sudo tcpdump dst port $PORT

#-i : Select interface that the capture is to take place on, this will often be an ethernet card or wireless adapter but could also be a vlan or something more unusual. Not always required if there is only one network adapter. "any" means all interfaces
sudo tcpdump -i any dst port 8500

#take a dump at tcp port at 900, can also filter by src/dst
sudo tcpdump -iany tcp port 8500

#-X: show the packet's contents
#-w Writing a standard pcap file is a common command option.
#Without the option to force line (-l) buffered (or packet buffered -C) mode you will not always get the expected response when piping the tcpdump output to another command such as grep.
sudo tcpdump -nn -w "${PCAP_FILE}"

# -w saves the dump instead of printing in on screen
sudo tcpdump -nn -XX -w d1 host 172.16.100.64

#-r $target_fiile : load the file written by -w
sudo tcpdump -nn -XX -r d1

sudo tcpdump -nn -r d1

#grab only icmp, i.e., ping
sudo tcpdump -i any -c5 icmp

<<SAMPLE
00:34:41.474225 IP willow.csail.mit.edu.39675 > maple.csail.mit.edu.5001: Flags [.], seq 1473:2921, ack 1, win 115, options [nop,nop,TS val 282136474 ecr 282202089], length 1448

The time stamp 00:34:41.474225 denotes the time at which the packet was transmitted by willow.

Flags: S/F/P/R/. means SYN/FIN/PUSH/RST/ACK can be combined
In reality, there is one sequence number per byte of data. 
The above packet has a sequence number 1473:2921, indicating that it contains all bytes from byte #1473 to byte #2920 (= 2921 - 1) in the stream, which is a total of 1448 bytes.

ack 1 means it is the sender, on receiver side it would be the next expected sequence number 

win: # of bytes available in the receiver buffer

length means the data packet's effective payload length

00:34:41.482047 IP maple.csail.mit.edu.5001 > willow.csail.mit.edu.39675: Flags [.], ack 2921, win 159, options [nop,nop,TS val 282202095 ecr 282136474], length 0

In reality, the ACK reflects the next byte that the receiver expects. The above ACK indicates that maple has received all bytes from byte #0 to byte #2920. The next byte that maple expects is byte #2921. The time stamp 00:34:41.482047, denotes the time at which the ACK was received by willow.
SAMPLE

###ss###

#To view only tcp or udp or unix connections use the t, u or x option. By default the "t" option alone is going to report only those connections that are "established" or CONNECTED". It does not report the tcp sockets that are "LISTENING". Use the '-a' option together with t, to report them all at once.

#To get the output faster, use the "n" option to prevent ss from resolving ip addresses to hostnames. But this will prevent resolution of port numbers as well.


#This will list out all the listening sockets. For example apache web server opens a socket connection on port 80 to listen for incoming connections.
#We can request additional internal TCP information with the -i info option.
#Recv-Q: data in cache/buffer but not in process yet, also check the ss command
ss -ltn

#check listen state for accept queue

#To print out the process name/pid which owns the connection use the p option
#Display sockets with state time-wait
ss -t4 state time-wait

#Note that many states like syn-sent, syn-recv would not show any sockets most of the time, since sockets remain in such states for a very short time. It would be ideal to use the watch command to detect such socket states in real time.

#Display all socket connections with source or destination port of ssh.
ss -at '( dport = :ssh or sport = :ssh )'

# Filter by address
ss -nt dst 74.125.236.178

# CIDR notation is also supported
ss -nt dst 74.125.236.178/16

# Address and Port combined
ss -nt dst 74.125.236.178:80

# source address is 127.0.0.1 and source port is greater than 5000
ss -nt src 127.0.0.1 sport gt :5000

# local smtp (port 25) sockets
sudo ss -ntlp sport eq :smtp

# port numbers greater than 25
sudo ss -nt sport gt :1024

# sockets with remote ports less than 100
sudo ss -nt dport \< :100

# connections to remote port 80
sudo ss -nt state connected dport = :80

#(TLS) Tells curl to use the specified certificate file to verify the peer. The file may contain multiple CA certificates. The certificate(s) must be in PEM format. Normally curl is built to use a default file for this, so this option is typically used to alter that default file.
curl --cacert <file>

#check domain owner info

whois example.com

#check corresponding IP address's MAC address - network card physical address
ip n (ip neighbor)

#see if server ignores the ACK from client,i.e., server thinks connection is NOT up yet, server will set a reset to server
cat /proc/sys/net/ipv4/tcp_abort_on_overflow

#check tcp connections at each state, don't
ss -nat

#check open sockets
lsof -i:port

#check # of tcp connections
sar -n SOCK

#follows routes a packet takes
traceroute
