#!/bin/bash

#force variable set 
set -o nounset
#force fail fast
set -o errexit

<<LINK
& run multiple commands in the background
&& run the next one only if the first one returns 0
|| run the second one if the frist one returns non-0

$($IF) && $($THEN) || $(ELSE)

use readonly variable and local - var inside the function

bash -n synatx check
bash -v track execution 
OR 
set -o verbose  + set -o xtrace

LINK

#delete the folder if it exists, note that the spaces around -d predicate matter! 
[ -d $FOLDER ] && rm -r $FOLDER

#But -d does not work with wildcards! 0 - stdin 1 - stdout 2 - stderr &1 means it is not a file but a file descriptor
# note the positiovne of 2>&1 matters, have to go AFTER the file, otherwise &1 means the current console - bash loads from left to right!
if ls /path/to/your/files* 1> /dev/null 2>&1; then
      echo "files do exist"

#compress and decompress, -c compress, -x extract
tar -czvf $TO.tar.gz $FROM

#display error code of the last command,e.g., use it after a semicolon 
echo $?
#similarly, !$ is the last argument of the previous command
cd !$

#use of CDPATH, probably what to edit your ~/.bashrc

#automatically corrects small typos in directory names and jumps to the best guess of existing directories.
shopt -s cdspell

#shell to exit if any subcommand or pipeline returns a non-zero status
set -e

#-a Mark variables and function which are modified or created for export to the environment of subsequent commands. 
#Note that you can use + to revert/undo the set option
set -a

#why do we need exec here???
exec locust -f $LOCUST_FILE

#multiline to a single line
cat file.txt|xargs

#single to multilines
cat single.txt | xargs -n 3

#creating a new environment without any existing environment variables for a new shell
env -i /bin/sh

#Note that this use of env is often unnecessary since most shells support setting environment variables in front of a command
env DISPLAY=foo.bar:1.0 xcalc


#!$ repeats the last argument of the last command

#!:1-$ It takes all the arguments to the previous command and drops them in.

#default value for variables
#You can also assign directly with ${VAR:=defaultval} (equals sign, not dash) but note that this wonâ€™t work with positional variables in scripts or functions.
THIRD_ARG="${3:-no_third_arg}"

### loop ex section starts
for var in "${ArrayName[@]}"
do
  echo "${var}"
  # do something on $var
done

echo "Total files in array : ${#files[*]}"
#total=${#files[*]}

while true
do
	sleep 1
done

for i $(seq 0 6); do kubectl exec -it -n stg5tidb stg5tidb-tikv-$i -- du -sh /var/lib/tikv; done
### loop ex section ends

