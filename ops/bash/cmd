#!/bin/bash

<<LINK
& run multiple commands in the background
&& run the next one only if the first one returns 0
|| run the second one if the frist one returns non-0

$($IF) && $($THEN) || $(ELSE)

use readonly variable and local - var inside the function

bash -n synatx check
bash -v track execution 
OR 
set -o verbose  + set -o xtrace

LINK

#compress and decompress, -c compress, -x extract, -exclude to exclude list of repos
tar -czvf $TO.tar.gz $FROM

#display error code of the last command,e.g., use it after a semicolon 
echo $?
#similarly, !$ is the last argument of the previous command
cd !$

#use of CDPATH, probably what to edit your ~/.bashrc

#automatically corrects small typos in directory names and jumps to the best guess of existing directories.
shopt -s cdspell

#multiline to a single line
cat file.txt|xargs

#single to multilines
cat single.txt | xargs -n 3
#replace tab with space
tr '\t' ' '

#delete all digits
tr -d '0-9'

#remove duplicate spaces
cat file | tr -s ' '

#cut 2nd and 4th column
cut -f2,4 file

#get all but 3rd column
cut -f3 --complement file

#search only files with certain extensions
grep -r --include=*.scala 'spray' ./ | less

#record terminal output
script my.terminal.seeesion

#creating a new environment without any existing environment variables for a new shell
env -i /bin/sh

#Note that this use of env is often unnecessary since most shells support setting environment variables in front of a command
env DISPLAY=foo.bar:1.0 xcalc

#take out --decode to encode
base64 --decode ${FILE_PATH}

# -n to not append the extra newline, use --decode after base64 to decode
echo -n ${DD_KEY} | base64 

#It’s similar to $() in that the output of the command inside is re-used. In this case, though, the output is treated as a file. This file can be used as an argument to commands that take files as an argument.
diff <(grep somestring file1) <(grep somestring file2)

#!$ repeats the last argument of the last command

#!:1-$ It takes all the arguments to the previous command and drops them in.

#show which processes are using a specified file, file system, or unix socket.
fuser -m -u /mnt/usb1

#check what processes are using a network port
fuser -v -n tcp 80

pmap -x [pid]

# Set the maximum number of open files to 10.
ulimit -n 10

#d, l, s(ocket), c(har device), p(ipe), -(other, e.g., normal file)
#add exec permission
chmod u+x xxx.sh

#make the file readonly by the group and other user
chmod go-w xxx.sh

###screen
#start a new screen session with session name
screen -S sessionName
screen -d -R sessionName

#list running sessions/screens	
screen -ls

#back to the same terminal
screen -r

#can use script to record and check the result of long-running process, by checking its generated typescript file

### chmod
# -R recursive
# -v verbose

#read and write by file owner
#read and write by group
#read only by other user
chmod 664 sharedFile

#show permision, or just ls -l
stat -c %a findPhoneNumbers.sh

#-rwxr-xr--
#leading hyphen: plain file
#each 3 letters, file owner, group, other user
#every file on linux is owned by a user and a group

###cron
#edit, -l to list
crontab -e

#3am job every day, pipe yes "y" to answer questions
0 3 * * * docker system prune -a 1> /home/ec2-user/cron.log  2> /home/ec2-user/cron.err

#In k8s, following a range with /<number> specifies skips of the number’s value through the range. For example, 0-23/2 can be used in the hours field to specify command execution every other hour. 0 */2 * * * means every 2 hours

#starts the program abcd in the background in such a way that the subsequent logout does not stop it
#often used in combination with the nice command to run processes on a lower priority
nohup abcd &

#A different issue that often arises in this situation is that ssh is refusing to log off ("hangs"), since it refuses to lose any data from/to the background job(s).[5][6] This problem can also be overcome by redirecting all three I/O streams
nohup ./myprogram > foo.out 2> foo.err < /dev/null &

#check how the command is resolved
type -a python3
