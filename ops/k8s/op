#!/bin/bash

kops export kubecfg --name $CLUSTER_ADDR --state s3://$S3_BUCKET

#List the pods created by the deployment. For similar purposes, can use --show-labels instead of -l
kubectl get pods -l app=nginx

#list pods for all namespaces
kubectl get pods --all-namespaces -o wide

kubectl get namespaces

#useful for debugging failure
kubectl describe pod -n $NS $POD_NAME 

#see events from nodes
kubectl describe node $NODE_NAME

#list ingress in cluster
kubectl get ing --all-namespaces

#populate env var to the first column of the 2nd line
export POD_NAME=$(kubectl get pods -l k8s-app=mockservice | sed -n 2p | awk '{ print $1 }')

aws eks --region ap-northeast-1 update-kubeconfig --name george_dev

kubectl config get-contexts
kubectl config current-context

MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default wintering-rodent-mysql -o jsonpath="{.data.mysql-root-password}" | base64 --decode; echo)

### Run an Ubuntu pod that you can use as a client
kubectl run -i --tty ubuntu --image=ubuntu:16.04 --restart=Never -- bash -il

### Another way to get a root shell
kubectl run ubuntu-$user --image ubuntu -ti -n $NS -- /bin/bash
 
kubectl get pods -n tpi | grep ete-terminator | head -n 1  | awk '{ print $1 }' | xargs kubectl logs -n tpi
# Verify that your chosen node has a disktype=ssd label, and then you can use spec.nodeSelector.disktype: ssd

kubectl get nodes --show-labels

#If a Pod has more than one Container, use --container or -c to specify a Container in the kubectl exec command. 
kubectl exec -it my-pod --container main-app -- /bin/bash

kubectl port-forward $POD -n $NS $LOCAL_PORT:$POD_PORT

#List the pods on one node
kubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=$NODE
