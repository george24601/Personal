treat doc as set of words, can order words lexicographically
or, order lowest-frequency-first => index docs based on the early words in
their lists=> doc spread over more buckets

JD J and s1, s2 with LCS length c and edit distance E, then
J =E/(C + E), notice in the set settings, symbols never repeat

set string length L, M ,and J relationship?

B-Tree index for length-based index => but length doesnt mean too much?

----
can base an index on symbols in just the first floor(J * L) + 1 positions of a string
of lenght L

each string of length L is placed in the bucket for each of its first J*L + 1
positions => B-tree with symbol as key leads to the string

probe string s of len L, just check all buckets s hashes to

-----

if pos i of prob string is the first match on t pos j=> implies LCS, edit distance bound
combine this bound with J's relationshp with E and C => get upper bound on j for each i

so create index on (symbol, position)

visit position i of s in numerical order,  assume no matches for eariler
positions, we can use upper bound on j to decide what buckets we need to look
in 

--------

Index on 3 attributes(symbol, #, len of suffix)

but note that each string is placed in floor(J*L) + 1 buckets, no matter the scheme!
