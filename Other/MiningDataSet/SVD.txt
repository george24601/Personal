SVD
A[m * n] = U [m * r] Sig[r*r](V[n*r])^T
r: rank of the matrix A. 

U: left singular vectors, r concepts/latent dimensions/latent factors, user to concept
Sig, singular values: concept strength

V:right singluar vectors: movie-to-concept

Always possible to decompose A where 
U, Sig, V, unique, 
U, V, column orthognormnal: U^T*U = I => columns are orgothonal unit vectors 
Sig: diagonal, entries are positives are sorted in decreasing order
----------
SVD: best axis to project on: min sum of squares of projection erros =? minimum reconstruction error

use movie-to-concept to find axis => Sig gives spread on the axis

U*Sig = coordinates of proints in the axis

How to do dimensionality reduction? set smallest singular values to zero => multiply back

how to mark similarily of matrices

-----

SVD: best low rank approx.

spectral decompostion of the matrix, based on each concept
U = sig(1) * U(1) * V(1)^T + sig(2) * U(2) ....
U(i) and V(i) are unti length, sig(i) scales them

How many sigs to keep => preserve Sum(sig(i)^2)

--------
map query (movies ratings by user) into a concept space? 
Inner product with each concept vector v
q(concept) = q * V => this gives concept strength


relation to eigen-decomposition:
A*A(T)
A(T)* A

so calculate SVD via eigen decomposition
singular vectors are dense

-------
make A = C * U * R make ||A - C * U * R||f small

Constraint: C contains cols from A, R contains rows from A, U psedudo-inverse of the interseciton of C and R

Ak , is SVD of A of rank k, CUR in O(mn) s.t. reconstruct error of CUR 
<= |A-Ak|f + Ep |A|f, with probablility at least 1 - ep, by picking
in practice pick 4k cons/rows
------
for A: m *n, sample size c

col case for c
for x = 1: n
	calc P(x)
for i = 1 : c
	pick j in [1..n] based on P(x)
	compute Cd(:, i)

let W the intersecion of sampled cols C and R, W = XZY^T
then U = YZ+X^T, Z+: 1/Zii
-----
CUR: basis vectors are actual cols and rows, and basis will be sparse, but may have duplicate ocls and rows
to handle duplicate: throw away, or scale the cols/rows by the square root of # of nums

In SVD, Sig is sparse and small, U is dense and small