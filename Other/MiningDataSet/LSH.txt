Shingling: convert documets etc to sets

Doc -> Shingling -> set of strings of length k that appear in the document -> minhashing -> LSH -> candidate pairs: those pairs of
sigs that we need to test for similarity

k-shingle/gram: sequence of k chars that appears in the doc => represent doc
with set of singles

Can hash long shingle to token => represent a doc by its tokens

---------
Jaccard Similary: size of intersection/size of union

To boolean matrics:  Rows = elements of the universal set. Columns = sets
Sim(C1, C2) = a/(a+b+c)

rows permuted randomly
h(C) = # of the first row in which column C has 1
Use several independent hash functions to create a signature for each col
=> signature matrix col : sets, rows, minhash for that column. in order for
that column

prob of h(C1) = h(C2) over all permutations is the same as Sim(C1, C2) => proof

implementation: approximation to permute rows, 

what if data avaible in columns, not rows?

-------------
For signature matrices: hash cols to many buckets, and make elements of the same bucket candidate pairs

make cols c and d candidate pairs if M(i,c) = M(i,d) for at least t fractions

Hash cols of signature matrix M several times. Arrange that only similar cols are likely to hash to the same bucket.
Candidate pairs are those that hash at least once to the same bucket

divind rows to b bands * r rows per band, for each band, hash its portion of each column  to a hash table with k buckets (K as large as possible)
Candidate pairs are those that hash to the same bucket for >= 1 band

Tune b and r to catch most similar pairs, but few nonsimilar pairs.

Suppose C1, C2 are 80% similar,
Pr(C1,C2 idential in one particluar band) =
Pr(C1,C2 NOT idential in any of the 20 bands) =

Why b banding works

May need to check the remaining candiate pairs really represnt similar sets

----
Represent a fingerprint by the set of positions of minutiae
Place a grid on a fingerprint
Set of grid squares wher eminutiae are located represents the fingerprint
Treat minutiae near a grid boundary as if also present in adjacent grid points]
No need to minhash since number of sqaures is not too large
Represent each FP by a bit vector with one position for each sqaure

Pick 1024 sets of 3 grid squares, randomly
for each set, two prints that each have 1 for all three squares are candidate pairs

Suppose typical fingerprints have minutiae in 20% of the grid squares. 
fingerprints from the same finger agree at least 80% of their sqaures

Pr(two fingerprints from the same finger each have 1s in 3 given squares) =
Pr(at least one of 1024 sets of three satisfied the Pr above) =
Pr(false positive)=

-------
Euclidean space: there is a notion of "average" of two points
distance measure function axiom
>= 0. =0 if x =y, d(x.y) = d(y,x), d(x,y) <= d(x,z) + d(z.y)

proof of JD is distance measure => convert to minhash to prove: whenever mh(x) != mh(y) (i.e. 1 in JD in result), at least one of the two statements are ture

consine is p1 *p2/|p1|*|p2|

why edit distance is also distance

-----------
In LSH context, hash function really takes 2 elements x and y, and return a
decision whether x and y are candidates for comparision

Suppose we have a space S of points with distance meaure d
A family H of hash functions is (d1,d2, p1, p2)-sensitive if for x, y in S
<=d1 => at least p1, >=d2 => at most p2

what the minhashing's sensitive family? notice we use Jaccard dist instead of
Jaccard sim directly!

AND ("rows in a band")/OR ("many bands") contruction
Given family H, construct H' whose members each consist of r functions from H
=> H''s sensitivity?

AND-OR construction => p's transformation based on r, b
OR-AND construction

Can even do cascading construction: OR-AND followed by AND-OR

for each S-curse, there is a threshold t, for which 1-(1-t^r)^b = t
when do we stop iterating?

-------
consine distance: random hyperplances, h(v, x) = 1 if v * x > 0 otherwise -1
Pr(h(x) = h(y)) = (?)

simplification: v with only 1, -1 entries is enough

euclidean distance:
hash function correspond t lines
parititon the line into buckets of size a
hash each point to the bucket containing its projection on the tline

d >> a, d << a analysis => family sensitivity
---------

