sequential allocation for multi-dimensional

LOC(A[J,K]) = a(0) + a(1)* J + a(2) * k
=> general form with a(r)

triangular matrix index resolution, and dense packing

linked allocation

sparse matrix cell: row, col, up, left, and val. Both links are circular

BASEROW list and BASECOL list, these are additonal nodes , not value nodes,
their row/col has value -1
----------
pivot a sparse matrix

alpha = 1/val(pivot)
val(pivot) = 1

I0 = row(pivot)
P0 = LOC(BASEROW[I0])
J0 = COL(PIVOT)
Q0 = LOC(BASECOL[J0])

S2: process pivot row

do {
P0 = LEFT(P0)
J = COL(P0)

if J >= 0
	PTR[J] = LOC(BASECOL[j])
	val(P0) = alpha * val(P0)
else
	break;
} while

S3: Find new row

Q0 = UP(Q0)
I = ROW(Q0)

if I < 0 terminate, we ve processed all rows 

I = I0 repeat S3, because we skip the pivot row we've processed

P = LOC(BASEROW[I]) //now P and P1 will process across row I from right to
left
P1 = LEFT(P)

S4: process pivot column after all other column entries have been processed
P0 = LEFT(P0)
J = COL(P0)

if J < 0
	VAL(Q0) = alpha * val(Q0)
	go to S3
if J = J0
	repeat S4 //we processed pivot col already, skip here

S5: Find (I, J)
while COL(P1) > J
	P= P1
	P1 = LEFT(P)
if COL(P1) = J
	goto S7
else
	goto S6
	

S6:Insert I, J
while ROW(UP(PTR[J])) > I
	PTR[J] = UP(PTR[J])

X <= AVAIL
VAL(X) = 0 
ROW(X) = I
COL(X) = J
LEFT(X) = P1
UP(X) = UP(PTR[J])
LEFT(P) = X
UP(PTR[J]) = X
P1 = X

S7:Pivot

VAL(P1) = VAL(P1) - VAL(Q0) * VAL(P0)
if VAL(P1) = 0 or |VAL(p1)| < Eps
	goto S8
else
	PTR[J] = P1
	P = P1
	P1 = LEFT(P)
	goto S4

S8: Delete I,J

while UP(PTR[J]) != P1 i.e., ROW(UP(PTR[J])) > I
	PTR[J] = UP(PTR[J])

UP(PTR[J]) = UP(P1)
LEFT(P) = LEFT(P1)
AVAIL <= P1
P1 = LEFT(P)
goto S4
	



------
1.
LOC(A[J,K]) = LOC(A[0,0]) + 2 * (n+1) * J + 2 * K

2.
a(r) should remain same

4.
f1 and f2 abstract is generic enough so eq 8 remains same

5.
Depending on memory location

6.
A stores in the lower half of the tetrahedral, B upper half

7.

9.
Keep finding the next, increase all and pointers until they match => inspect or pointers

11.
200 col nodes + 200 row nodes + 200 * 4 item nodes

12.
Q0 = b/a , P0 = c, Q1 = d

13.
Single list could be used. Convenience to have at the end of each list a sentinel that  "compares low" in some field on which the list is ordered

17. Mutliply two sparse matrix(!)

20.

21.

22.

23.

24.
maintain a verification array V and a list L of the locations used
Whenever you want to access A[k], check 0 <= v[k] < n and L[V[k]] = k
if not,
V[k] = n
L[n] = k
A[k] = 0
n++
