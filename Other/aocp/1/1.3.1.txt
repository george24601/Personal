MIX

each byte holds from 0 to 63. Algorithm in Mix should work properly regardless of how big a byte is.

9 registers
Accumulator: 5 bytes and a sign : arithmetic and operating on data
eXtension: same
6 Index registers: 2 bytes and a sign : counting and for referencing memory address
Jump address: 2 bytes, sign always positive: holds the address of the instruction following the "jump" operation. primaries used with subroutines

overflow toggle: single bit
comparison indicator: <, =, >
memory: 4k words, each with 5 bytes and a sign

fields of words: 0 as sign, 1-5 are bytes =>
(0:0) sign
(0:2) sign and the first two bytes
(0:5) the whole word

field spec is stored as 8L+R inside machine
------
instruction format in a word: (+/-) AAIFC
C: operation code,e.g., C=8 is LDA load A register
F: modification of the operation code: normally a field in the field 8L + R,e.g., C=8 and F=11 => load A register with the (1:3) field

(+/-)AA: address. I = 0, then the address is used without change. Otherwise, I should be between 1 and 6, and contents of Ii are added to (+/-)AA, before the instruction is carried out, 
and the result is used as address. This indexing process takes place on every instruction. If the result does not fit in two bytes, the value is undefined

Assume 4k memoery cells => can fit in 2 bytes

instructin format: OP ADDRESS,I(F)

---------

LDA: load A. C=8; F= field
A loads CONTENTS(M), field is shifted over to the right-hand

LDX: C=15, F= field

LDi: C = 8+i; F= field. Although index register contains only 2 bytes instead of 5

LDAN (negative): C = 16, F= field
LDXN:C =23, F= field
LDiN: C= 16+i; F= field
The opposite sign is loaded

STA: C=24; F= field
portion of the contents of rA repalces the field of CONTENTS(M), the number of bytes in the field is taken from the right hand of the register and shfited left if necessary

STX:C=31, F=field

STi:C=24+i; F= field

STJ:C=32, F=field
often uses (0:2) so that rJ value is used as address

STZ: C=33; F= field. The specified field is cleared to zero

----------

ADD: C=1, F=field
V is added to rA, overflow toggle is on if result too large

SUB:C=2; F= field

MUL:C=3; F=field
10 byte prodct V times rA, replaces registers A and X, signs of rA and rX are both set to the sign of product

DIV:C=4; F=field
Value of rA and rX, as 10-byte number with the sign of rA. If data is invalid, overflow toggle is on. integer in rA, remainder in rX. The sign of rX afterwards is the previouis sign of rA

Philosophy: better to give complete, baffling description than an incomplete, straightforward one

Notice that in the example, ? is caused by 
1. the instruction ignores it due to field range or sign
2. because we can not assume underlying byte representation, any "borrow" action from left or right byte will cause ? => we dont not know the max value of each byte 
----------

ENTA(enter A): C=48, F=2
quantity M is loaded into rA

ENTX(enterX): C=55, F=2
ENTi: C-48 +i, F=2

ENNA(enter negative A). C=48; F=3
ENNX(enter negative X) C=55; F=3
ENNi. C=48+i; F=3

INCA. C=48; F=0.
INCX. C=55; F=0
INCi. C=48+i; F=0

DECA. C=48; F=1
DECX. C=55; F=1
DECi. C=48+i; F=1

-----------
CMPA: C=56, F= field
field of A is compared with the same field of CONTENTS(M)

CMPX: C=63; F=field

CMPi:C=56+i; F= field

JMP. C=39; F=0
The next instruction is taken from location M. when typical jump takes place, rJ has the next instruction address. rJ is changed when an actual jump happens

JSJ:C=39; F=1
cotents of rJ are unchanged

JOV: C=39; F=2
if the overflow toggle is on, it is turned off and a JMP occurs; otherwise nothing happens

JNOV. C=39; F=3
If the overflow toggle is off, a JMP occurs, otherwise it is turned off

JL, JE, JG, JGE, JNE, JLE: C=39, F=4-9
Jump if comparison indicator is set to <, =, >=, !=

JAN, JAZ, JAP, JANN, JANZ, JANP: C=40, F=0-5

JXN...C=47, F=0-5

JiN....C=40+i; F= 0-5

------
SLA, SRA, SLAX, SRAX, SLC, SRC. C=6, F=0-5
Shfit. M specifies # of MIX bytes to be shifted left or right

MOVE. C=7; F=number
# of words specified by F is moved, starting from M to the location specified by the contents of index register 1. The transfer occurs one word at a time, and rI1 is increased by the value of F at the end of the op,i.e., F=0, nothing happends
MOVE applies one word at a time, so later move steps will read the alreadied overwritten values

NOP:C = 0

HLT (halt): C=5;F=2
The machine stops

-----
I-O Unit numbers

IN. C=36; F=unit
transfer info form  input into locations starting with M. # of locations transsfered is the block size for this unit

OUT. C=37, F=unit

IOC. C=35; F= unit, input-output control
The machine waits until the specified unit is not busy

JRED: C=38; F=unit
jump if the specified unit is ready

JBUS: jump when the unit is not ready

NUM:C=5; F=0
change char code into numeric code. Registers A and X are assumed to contain a 10-byte # in char code

CHAR: C=5; F=1
turn numeric code into char code for output. Value in rA is converted into a 10-byte number that is put into A and X in char code

----
ADD, SUB, load, store, shift, comparison, take 2 units of time
move requires one unit plus 2 for each word moved
mul, num, char require 10 units and div requires 12
remaining take one unit


