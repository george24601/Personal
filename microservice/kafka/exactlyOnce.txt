Idempotent Producer
Each producer got assigned a PID and keep track of sequence nubmer of kafka messages
Broker expects the next sequence number exactly one higher than the one in memory, otherwise if it too much, it is fatal and should be rejected!

Transactional Gurantee
User provides a TransactionalId 
1. exactly one active producer will get the id
2. the next instance can be guranteeed any unfinished transactions have been either aborted or commited,i.e., different instances of producers with the sameId will be able to resumeor abort any transactions instantiated by the previous instance

Each produer get assigned a transaction coordinator, which assigns PID and manage transaction,
use a transaction log topic to capture the state of transcaiton coordinator,i.e., state of each active transaction 

Sequence of actions
1. producer ask the broker to discover transaction coordniator
2. producer ask the TranCo for PID, and bump the PID version number/epoch to avoid zombie PID => synchronous
3. rollback or forward any transactions left incomplete by the previous instance of the producer  => synchrounous
4. Producer marks locally the transaciton has begun, and for coordinator it doesn't begin until the first record is sent
5. producer add topicPartiion to the transaction on TC, so that we can mark commit or abort marker on each transaction
6. producer produce to broker, with PID, epoch, and sequence number
7. producer send Map<TopicPartitions, OffsetAndMetadata> and a groupId to TC
8. producer will send a TxnOffsetCommitRequest to the consumer coordinator to persist the offsets in the __consumer-offsets topic
9. producer issues an EndTxnRequest to the transaction coordinator, with additional data indicating whether the transaction is to be committed or aborted
10.TC Writes a PREPARE_COMMIT or PREPARE_ABORT message to the transaction log.
11.TC Begins the process of writing the command messages known as COMMIT (or ABORT) markers to the user logs through the WriteTxnMarkerRequest.
12. transaction coordinator to the the leader of each TopicPartition which is part of the transaction. Upon receiving this request, each broker will write a COMMIT(PID) or ABORT(PID) control message to the log
This message indicates to consumers whether the messages with the given PID must be delivered to the user or dropped. As such, the consumer will buffer messages which have a PID until it reads a corresponding COMMIT ir ABORT message, at which point it will deliver or drop the messages respectively
13.After all the commit or abort markers are written the data logs, the transaction coordinator writes the final COMMITTED or ABORTED message to the transaction log,


Expiring PIDs
-----------


Testing Plan
----------
The system tests will focus on ensuring that the guarantees are satisfied even with failing components, ie. that the system works even when consumers, producers, brokers are killed in various states.

