Powerful object literal notation => this leads to JSON

BAD: all top level varaibles of all compilation units are all in "the global
object" namespace

JSLint: a parser that reports bad JS parts

/* */ is NOT safe to comment out block of code, because it may appear is regex
literals

-----
Number

JS has a SINGLE number type: a 64-bit FP => so 1 and 1.0 are same

scientific notation supported e.g. 1e2 => 100

NaN: number value that is the result of ops that cannot produce a normal
result. NaN is not equal to any value, EVEN ITSELF. use isNaN(num) to detect

Infinity: all values greater than 1.79e+308

-----
String

string literal can be wrapped in single OR double quotes. All chars are 16
bits wide

NO char type exists => just use string with one char in it

\u allows for specifying char code points numerically
"A" = "\u0041"

strings are IMMUTABLE
-------

Each <script> tage delivers a compilation unit that is compiled and
immediately executed. JS does NOT have a lintker, so all compilation units are
in a common global namespace

block is JavaScript do NOT create a new scope, so variables should be defined
at the TOP of the function, not in blocks

falsy values:
false, null, undefined, '', 0, NaN
Everything ELSE is truthy

in enumerates the property names of an object. On each iteration, another
property name string from the object is assigned to variable

necessary to test object.hasOwnProperty(variable) to determine whether
property name is truly a member of the object or was found instead on the
prototype chain

e.g.

for(myvar in obj) {
 if(obj.hasOwnProperty(myvar))
{
..
}
}
------

exception is usually an object literal containing a name property and a
message property.

If a return expression is not specified, then the return value will be
UNDEFINED

typeof returns number, string, boolean, undefined, function, object. if the
operand is an array or null, the the result is OBJECT!
