functions often satisfy simple properties, and enjoy simple algebraic relationships

functions of an API satisfy elegant laws, itself is a sign of a good design

A stated law which is untrue is worse than no law 

----
Skew heap example

1. head > both children
2. minElement can be done quickly
3. left and right subtree should be roughly balanced. Insert into left subtree, but swap subtree after each insertion

----
Generation: choosing a random list of element, and insert them into the emtpy heap

property check: 1 and 3
----

deleteMin: which two subtrees to merge,after we promote min(leftRoot, rightRoot)?
By def of insertion, after each insert, we know size of left <= right, so it must be on left to ensure we havles at each turn

---
Generation: random sequence of insertions and deletions
Catch: prevent deleting from empty list.
make now expecets a list of Ops as its argument, and we need to specifiy a generator for this type
---
Turns out the left <= good is TOO strong, property check always fails. the complexity is amortized

To prove: each bad node carries one credit, which must be supplied when it is created, and can be consumed when it is processed

credit approach for bad nodes

introduce cost_insert and cost_delete

claim: on avg each insertion or deletion travers only log2n nodes, and cretes euqually many new, possibly bad nodes

properties for cost_insert and cost_deleteMin
------
formal verficiation very expensive to the point of impractical

-----
Fulfill a spec
Model for PQ, need a function mapping each skew heap to its model
Given function f on model, and model g on original, can define a property that f corectly models g on original h,i.e.,
f (model h) == model (g h)

f is your function, g is the property-tested function 

---

----------
Patterns
1. Inversible operation
2. Two different ops on the same model gives the same result
3. Invariants: something must stay same
4. Idempotency

Use scalaz with scalacheck

Generator with frequency




