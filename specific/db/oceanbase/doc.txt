Root Server:
colocated with US, each cluster has only ONE US
when swtich primary and backup, new RS uses internal table to recover source of truth reqeusted by the cluster

Chuck Server:
colocated with MS. Read US within the same cluster, if not available, then read backup US from other cluster, and finally read the active US

LMS: 
colocated with RS, query cluster's internal table on primary and backup's traffic info, and address's of other MS

----------------
RS uses RootTable, which stores all tablet's size, checksum, and location

User Meta Table, each UT has one, each row mapps to a Tablet in UT, stores location of UserTablet, UMT itself may be in multiple tablets

User Root Table, only 1 tablet, every row corresponds to a Tablet in UMT, stores its location

First Root Table: every row corresponds to a user root table, stores URT's location info. Only 1 tablet, and can not be splited

FRT stays in memory.all URT in cluster are cached. 
since UMT and UT are splittable, caches are evicted
-------

RS updates RT with Tablets reported by CS, if tablet's range split point is not consistent, need to rollback change to RootTable

For each Tablet A reported, query the RT to get rows that intersects with A's range

1. if nothing returns, we have a new row
2. if range exactly one row that is  same, just update that row
3. if range A is the union of some rows, this means we merge
4. if range A is the subset of a single row, this means we split it into 2 or 3 rows

--------
RS has a special process just to rebalance Tablet replication and relocation, and add coreesponding rep/relocation task to relocation server's task list.
RS has another special process to scan all chuck server, and execute migration tasks on each CS. 

-------

When create a table
1. assign new table ids to URT, UMT , and UT, respectivly 
2. create UMT: create schema based on the definition of UT, choose CS and create Tablet 
3. create URT: create schema based on UMT, choose CS and create Tablet
4. choose ChuckServer, and create UT tablet
5. record the schema of 3 tables into Schema related tables
6. renew schema manager, and sync to other servers
7. Update URT, UMT, UT, location in each's parent

when delete table. Note deletion of tablet is async
1. delete UT, UMT, and URT, info in 3 core tables
2. renew schema manager, and sync to other servers

-------
BootStrap
1. creat FRT, and record its tablet location
2. create core schema tables __all_table, __all_all_column, __all_join_info, __all_dll_operation, in each case, choose CS and create tablet, and then add record to FRT
3. create other system tables: 
choose ChunkServer and create empty Tablet
add that new record to FRT
update Schema related system tables, and record it in schema
4. Read system table, update schema manager, and sync it to CS, MS , and main US
5. Init certain system table's data

Note interal tablet goes directly to FRT

-------
client r/w requests go to active US, daily merge or version read goes to backup US

active and backup US use Paxos to sync CommitLog. Sync request is async, but write to disk is sync

Sequence of actions
1. main US sends CL to backup US, asyncrously
2. backup US stores commitLog to a circular buffer
3. backup US acks an nsync, marks as in progress. This ack also works as heartbeat
4. backup US changes its status to sync, and synchronously write log in buffer onto journal on disk
5. backup acks written transaction  to main US
6. Once main US knows that a quorum of all USs have journaled the CL on the disk 


if main US's sync req times out all the time, it sets itself as backup, and RS will pick a new update server

-------
RS will pick the US with highest log ts as main US
US uses lease to keep communication with RS
main US syncs commit log to backup US

head of each commit file has the commited ID of the machine when this file is generated to identify log generation time when replay the log, and which is commited.
When a backup US replays the log, it can only replay to the last file's commited id, anything beyond that must be retriveved from the new active US, remaining log files needs to be renamed and logically deleted 

------

SSTable structure:
SuperBlock/SuperBlockBackup/Block1/Block2/Block3 .../BlockN

SuperBlock (SB) is the head of teh data file, a struct stores certain metadata, import ones
1. total_macro_block_number
2. used_macro_block_number
3. first_macro_block_offset
4. tablet_meta_entry_block_index


Block1..BlockN are MacroBlocks (MacroB), head of the MacroB is a common MacroB Common Header to mark type and status of this MB

MacroB storing metadata:
1. Schema
stored in one or more MacroB, starts at schema_entry_block_index defined in SB, multiple schmeas are linked together
2. compressor
Compressor name + zip library
3. MacroB metadata
this macro block's type and version 
4. tablet metadata
TableID, # of lines, size, SSTable # of macro, schema 


MacroB storing SSTable data
1. MacroBlockCommon Header
2. SSTable MacroBlockHeader
Block Index and block data position, size, and range
3. N Microblocks (MicroB)
stores row data
4. MicroB index
5. MicroB EndKey
N+1 EndKeys

MicroB
1. BlockHeader
shfit for row index array, line #
2. Row data: PKS and other keys, separated by EOL char
row_number rows
3. row index
row_num_+1 element array, stores shift for each row. Last element points to the end of the tail
-------

When migrating into a new tablet
1. read 1 macro block from source
2. select a local disk and find corresponding data file
3. give a tablet metadata, and assign a new macroblock in the data file
4. write macroblock, modify macroblock metadata, add this macroblock to tablet's list of macroblock metadata
5. Add tablet metadata into TabletImage, and record commit log

--------

1. allocate two macro blocks of memory
2. pick a tablet from tablet image, and read through all its MacroBlocks
3. merge data with UpdateServer, write to the memories
4. if both memories are full, flush first one to data file, which means...
	a. new macroblock
	b. update macroblock metadata
	c. append new tablet metadata
	d. clear first block
	e. swap two memory block sequence, keep writing
5. repeaat 3-4 until there is no macroblock to update
6. calculate split point in new macroblock metadata, split tablet metadata into multiple macroblock metadata list
7. add new tablet metadata into new version of tabletimage

------

reset macro blocks?


------
internal table starts with __. Display them with SHOW ALL TABLES

CREATE TABLE:  Special cases
JOIN_INFO 
EXPIRE_INFO

new index will not be in effect until after a daily merge

ALTER SYSTEM: 
SWITCH ROOTSERVER
SWITCH UPDATESERVER
{START | STOP |DELETE} CLUSTER

SELECT ... FOR UPDATE
add write exclusive lock to the query result
how about reading unsubmitted data?

-------

prepared statement:
PREPARE
EXECUTE
DEALLOCATE

hint:
READ_CONSISTENCY
FROZEN_VERSION
INDEX
