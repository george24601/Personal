@startuml

[Stop purger] as sp
[Stop copier] as sc
[flyway hot] as fh
[flyway cold] as fc
[Start purger] as p
[Start copier] as c

sp --> fh
sc --> fh
sp --> fc
sc --> fc
fh --> c
fc --> c
c --> p

@enduml


@startuml

[full restore] as fr
[single row insert with pt-archiver] as si
[single row deletion] as sd
[batch row insert] as bi
[batch row delete] as bd
fr --> si
si --> sd
si --> bi 
bi --> bd
sd --> bd

@enduml


@startuml

component [Pre-prod] {
database TiDB
queue "saved mysql traffic" as traffic 
[sync-diff] as sd
database Aurora_V
[cross domain checking] as cd
}

component [PROD] {
[payment] as srv
database wallet_s
}


srv --> traffic
traffic --> Aurora_V
traffic --> TiDB

sd --> TiDB

sd --> Aurora_V
@enduml

@startuml

component [PROD]{
database Aurora_M
database Aurora_S
database TiDB_M
database TiDB_S
component Payment
database Wallet
}

component [PRE-PROD]{

queue ReplayProxy as rp
database TiDB_V
[cross domain checker] as dc
[sync-diff] as sd
}


TiDB_M <-- Aurora_M: binlog to
TiDB_M --> TiDB_S: binlog to
Aurora_M --> Aurora_S : existing binlog to
Aurora_S -> Daas: exisiting pipeline to
Payment --> rp
rp --> Aurora_M: RW
rp --> TiDB_V: RW

dc --> TiDB_V
dc --> Wallet

sd --> TiDB_V
sd --> Aurora_S

@enduml


@startuml

database RDS {
    [topup]
    [others]
}
database TiDB {
    "topup" as [T-topup]
    "others" as [T-others]
}


request --> [payment]
component [payment] {
    component [sharding-proxy]
}
[sharding-proxy] --> [T-others]
[sharding-proxy] --> [T-topup]

[T-topup] --> [topup]: replication
[T-others] --> [others]: replication

@startuml
database "aurora" {
  [payment_p2p]
  [subpayment_p2p]
  [tranfer_p2p]
  [payment_other]
  [subpayment_other]
  [payment_acq]
  [subpayment_acq]
  [payment_topup]
  [subpayment_topup]
  [other tables....]
}
database tidb
aurora --> tidb: binlog all tables
@enduml


@startuml
database TiDB
database Aurora_M as RDS
database Aurora_S as Slave
component [cashier] as C {
    [proxy]
}
component [NPS] as P
queue kafka
[/pay] -> C
proxy --> [OPS]: 99% /pay
proxy --> P: 1% /pay
[OPS] -> RDS
P --> TiDB
TiDB --> RDS: binlog
[other APIs] --> [NRS]
kafka --> [NRS]
[NRS] -> RDS
[NRS] -> TiDB
RDS -> Slave: existing binlog
Slave -> [DaaS]: existing pipeline
@enduml



@startuml
skinparam component {
	backgroundColor<<done>> Green
	backgroundColor<<doing>> Yellow
	backgroundColor<<explore>> Blue
}

[Java] --> [Spring]
[Network] --> [RDS]
[Network] --> [Redis]
[RDS] --> [Spring]
[Java] --> [Kafka]
[Network] --> [Kafka]
@enduml
