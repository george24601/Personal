@startuml
[Hot] as h 
[Syncer - singleton] as s
[Cold] as c

h <-- s: single thread read
s --> c: multi thread write

@enduml


@startuml
[dev poc copier - 3 days] as cp_poc
[dev poc purger - 2 days] as purger_poc
[insertion development - 3 days] as in_d
[development - 3 days] as in_d

di --> dc
di --> 

@enduml

@startuml

[Stop purger] as sp
[Stop copier] as sc
[flyway hot] as fh
[flyway cold] as fc
[Start purger] as p
[Start copier] as c

sp --> fh
sc --> fh
sp --> fc
sc --> fc
fh --> c
fc --> c
c --> p

@enduml

@startuml
[full restore] as fr
[single row insert] as si
[wallet code change] as cc
[single row deletion] as sd
[batch row insert] as bi
[batch row delete] as bd
fr --> si
si --> bi
bi --> bd
sd --> bd
si -> cc
cc -> sd
@enduml

@startuml

component [Pre-prod] {
database TiDB
queue "saved mysql traffic" as traffic 
[sync-diff] as sd
database Aurora_V
[cross domain checking] as cd
}
@enduml

@startuml

component [PROD]{
database Aurora_M
database Aurora_S
database TiDB_M
database TiDB_S
component Payment
database Wallet
}

component [PRE-PROD]{

queue ReplayProxy as rp
database TiDB_V
[cross domain checker] as dc
[sync-diff] as sd
}


TiDB_M <-- Aurora_M: binlog to
TiDB_M --> TiDB_S: binlog to
@enduml


@startuml
database "aurora" {
  [payment_p2p]
  [subpayment_p2p]
  [tranfer_p2p]
  [payment_other]
  [subpayment_other]
  [payment_acq]
  [subpayment_acq]
  [payment_topup]
  [subpayment_topup]
  [other tables....]
}
database tidb
aurora --> tidb: binlog all tables
@enduml

@startuml
skinparam component {
	backgroundColor<<done>> Green
	backgroundColor<<doing>> Yellow
	backgroundColor<<explore>> Blue
}

[Java] --> [Spring]
[Network] --> [RDS]
[Network] --> [Redis]
[RDS] --> [Spring]
[Java] --> [Kafka]
[Network] --> [Kafka]
@enduml
